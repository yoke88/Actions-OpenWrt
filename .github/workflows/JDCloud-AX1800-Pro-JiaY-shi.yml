#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
###############手动修改##############
name: JDCloud-AX1800-Pro-JiaY-shi

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      REPO_COMMIT:
        description: "The commit SHA hash or branchname to use"
        required: false
        default: 'master'
        type: string
      NO_DOCKERMAN:
        description: 'Not build luci-app-dockerman'
        required: true
        default: true
        type: boolean
      NO_OPENCLASH:
          description: 'Not build luci-app-openclash'
          required: true
          default: true
          type: boolean
      NO_PASSWALL2:
          description: "Not build PASSWALL2"
          required: true
          default: true
          type: boolean
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
#  schedule:
#    - cron: 0 16 * * *

env:
  ###############手动修改##############
  OPENWRT_NAME: JiaY-shi
  UPLOAD_TAG_NAME: jdcloud-ax1800-pro_ax6600
  REPO_URL: https://github.com/JiaY-shi/openwrt
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: JDCloud-AX1800-Pro/.config
  DIY_P1_SH: JDCloud-AX1800-Pro/diy-part1.sh
  DIY_P2_SH: JDCloud-AX1800-Pro/diy-part2.sh
  PACKAGES_TO_UPLOAD: JDCloud-AX1800-Pro/packages_to_upload.txt
  SSH_ACTIONS: false
  UPLOAD_FIRMWARE: true
  UPLOAD_PACKAGES: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    permissions:
      contents: write
    
    steps:
    - name: 全局SSH链接管理
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      uses: mxschmitt/action-tmate@v3.18
      with:
        limit-access-to-actor: true
        connect-timeout-seconds: 600
        detached: true
        
    - name: 检查项目分支
      uses: actions/checkout@main
      
    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat env/depends-ubuntu-2004)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        
    - name: 清理磁盘空间(Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # when set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: false
        dotnet: false
        haskell: false
        large-packages: false
        swap-storage: false
        
    - name: 下载固件源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL openwrt
        if [[ -n "${{ github.event.inputs.REPO_COMMIT }}" ]];then
          cd openwrt && git checkout "${{ github.event.inputs.REPO_COMMIT }}"
        fi
        cd /workdir

        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
      
    - name: 加载feeds.conf.default & DIY_P1_SH
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: 应用patch & 更新安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: 加载config & DIY_P2_SH
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
               
    - name: 取消编译dockerman
      if: github.event.inputs.NO_DOCKERMAN == 'true' && success()
      run: |
        cd openwrt
        sed -i '/CONFIG_PACKAGE_luci-app-dockerman=y/d' .config
        sed -i '/CONFIG_DOCKER_CGROUP_OPTIONS=y/d' .config

    - name: 取消编译passwall2
      if: github.event.inputs.NO_PASSWALL2 == 'true' && success()
      run: |
        cd openwrt
        sed -i '/CONFIG_PACKAGE_luci-app-passwall2/d' .config

    - name: 取消编译openclash
      if: github.event.inputs.NO_OPENCLASH == 'true' && success()
      run: |
        cd openwrt
        sed -i '/CONFIG_PACKAGE_luci-app-openclash=y/d' .config
       
    - name: 下载安装包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        
        sed -nE 's/.*(192.168\.[0-9]+\.[0-9]+).*/\1/p' package/base-files/files/bin/config_generate | head -n 1 > IP_ADDR
        [ -s IP_ADDR ] && echo "IP_ADDR=$(cat IP_ADDR)" >> $GITHUB_ENV
        if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' .config; then
                echo "BUILD_DOCKERMAN=-docker" >> $GITHUB_ENV
        else
                echo "BUILD_DOCKERMAN=" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT
    
    - name: 整理文件并重命名
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled() && success()
      run: | 
        mapfile -t devices < <(grep '^CONFIG_TARGET_DEVICE.*=y' openwrt/.config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        cd openwrt/bin/targets/*/*
        sudo -E apt-get -qq install rename
        for val in "${devices[@]}"; do
          rename "s/.*${val}/${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${val}${{ env.BUILD_DOCKERMAN }}/" *
          echo "$val"
        done
        if [[ "${{ env.UPLOAD_PACKAGES }}" == "true" ]]; then
          mkdir "$GITHUB_WORKSPACE/upload" 2>/dev/null
          for package in $(cat "$GITHUB_WORKSPACE/$PACKAGES_TO_UPLOAD"); do
            if [[ -n "$package" && -d "packages/*/$package" ]]; then
                  zip -jru "$GITHUB_WORKSPACE/upload/packages_to_upload.zip" "packages/*/$package"  2>/dev/null
            fi
          done
        fi
        rm -rf packages

        if [[ "${{ env.UPLOAD_PACKAGES }}" == "true" ]]; then
          mv "$GITHUB_WORKSPACE/upload/packages_to_upload.zip" ./ 2>/dev/null
        fi
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
  
    - name: 打包上传固件到Actions Artifacts
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.BUILD_DOCKERMAN }}
        path: ${{ env.FIRMWARE }}
        
    - name: 生成固件Release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled() && success()
      run: |
        echo "- 使用源码：${{ env.REPO_URL }}" >> release.txt
        echo "- 登录地址：${{ env.IP_ADDR }}" >> release.txt
        echo "- 注意京东云AX1800-Pro亚瑟无线AX1800规格，5G无线不支持160MHz频宽" >> release.txt
        echo "- 注意京东云AX6600雅典娜无线AX6600规格，5.8G无线不支持160MHz频宽" >> release.txt
        if [[ "${{ env.BUILD_DOCKERMAN }}" == '-docker' ]]; then
                echo "- 已编译luci-app-dockerman" >> release.txt
        else
                echo "- 未编译luci-app-dockerman" >> release.txt
        fi
        echo "编译openclash=${{ env.BUILD_OPENCLASH }}" >> release.txt
        echo "release_tag=${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.BUILD_DOCKERMAN }}" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 发布固件至Release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled() && success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.BUILD_DOCKERMAN }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt